#!/usr/bin/python
import requests
import os
import shutil
import tempfile
import argparse
import sys
import tarfile
import subprocess
import datetime
import configparser
import warnings
import sqlite3
import enum

AUR_URL = None
RPC_URL = None
OPTIONS = None
CONFIG = None
DB_CONNECT = None

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class Status(enum.Enum):
    Installed = 0
    Downloaded = 1

    def name_from_val(self, val):
        if val == 0:
            return Status.Installed.name
        elif val == 1:
            return Status.Download.name


def argument_parse():   
    parser = argparse.ArgumentParser(
        description="Search for the pkg_name in the Arch User Repository",
        epilog="Get the latest version at https://github.com/Ezbob/PyAUR-Explorer")
    parser.add_argument("pkg_name", nargs="?", default=None,
        help="Package name")
    parser.add_argument("-q","--quiet", action="store_false", 
        help="Suppresses extra explanatory messages")
    parser.add_argument("-a","--all", action="store_true", 
        help="Prints all info fields")
    parser.add_argument("-d","--download", action="store_true", 
        help="Download the package if a exact match was found")
    parser.add_argument("-I","--install",action="store_true", 
        help="Download and install the package using makepkg")
    parser.add_argument("-U","--update", action="store_true",
        help="Forces a download of the package")
    parser.add_argument("-Q", "--query", action="store_true",
        help="Query the database entries")
    parser.add_argument("-R", "--sync", action="store_true",
        help="Use pacman to sync database with removed packages")
    parser.add_argument("-y", "--yes", action="store_true",
        help="Say yes to all interactive questions when downloading packages")
    return parser.parse_args()


def consume_arguments():
    global OPTIONS
    args = argument_parse()
    OPTIONS = vars( args )
    return args.pkg_name


def open_get_request(url, params, stream=False):
    req = requests.get( url, params=params, stream=stream )
    req.raise_for_status()
    return req


def check_json(req):
    if req.headers['Content-Type'] == "application/json":
        return req.json()
    return req 

# valid types are 'search' and 'info'
def get_json_from_aur(pkg_name, request_type='search'):

    version = CONFIG.get('AURconnection', 'version', fallback="5")
    params = { 'v' : version }
    params['type'] = request_type
    params['arg'] = pkg_name
    json = check_json( open_get_request( RPC_URL, params ) )

    if json['type'] == "error":
        print(bcolors.FAIL + "Server returned an error:", json['error'], bcolors.ENDC)
        exit(1)
    else:
        return json['resultcount'], json['results']

def date_from_timestamp(timestamp):
    return datetime.datetime.fromtimestamp(
        int(timestamp)
    ).strftime('%H:%M %d-%m-%Y')

def ask(message):
    if OPTIONS['yes']:
        return 'y'
    else:
        return raw_input(message) if sys.version_info[0] == 2 else input(message)


def decode(message, encoding='utf-8'):
	return message.decode(encoding) if type(message) == bytes else message


def print_entry(entry):
    if OPTIONS['all']:
        print(bcolors.BOLD + decode(entry['Name']), bcolors.ENDC )
        for key, val in entry.items():
            if key == 'Name':
                continue
            if key == 'FirstSubmitted' or key == 'LastModified':
                print("    {}{}{}: {}".format(bcolors.OKBLUE, key, bcolors.ENDC, date_from_timestamp(decode(val))))
            else:
                print("    {}{}{}: {}".format(bcolors.OKBLUE, key, bcolors.ENDC, decode(val)))
    else:
        v = bcolors.OKGREEN + decode(entry['Version']) + bcolors.ENDC
        name = bcolors.BOLD + decode(entry['Name']) + bcolors.ENDC
        print(name + " " + v)
        print("    {}{}{}".format(bcolors.HEADER, decode(entry['Description']), bcolors.ENDC))


def vprint(*message, color=None):
    if OPTIONS['quiet']:
        cprint(*message, color=color)

def cprint(*message, color=None):
    if color:
        print(color, end='')
    print(*message)
    if color:
        print(bcolors.ENDC, end='')

def add_trailing_slash( path ):
    return path if path.endswith("/") else path + "/"


def check_or_make_out_dir():
    pkg_dir = os.path.abspath(os.path.expanduser(CONFIG['cache']['packagepath']))

    if not os.path.exists(pkg_dir):
        os.makedirs(pkg_dir, mode=0o660)
    elif not os.path.isdir(pkg_dir):
        cprint("Output directory chosen is not a directory. Exiting.", color=bcolors.FAIL)
        exit(1)
    return add_trailing_slash(pkg_dir)


def download_package(tar_url, file_path, chunk_size=64):
    download_url = AUR_URL + tar_url
    download_request = open_get_request( download_url, params={}, stream=True )

    with open(file_path, 'wb') as file:
        for chunk in download_request.iter_content(chunk_size):
            file.write(chunk)


def find_pkgbuild_file(path):
    for file in os.listdir(path):
        if file == "PKGBUILD":
            return True
    return False


def install_package(file_path, pkg_name):
    with tempfile.TemporaryDirectory() as temp_dir:

        shutil.copy(file_path, temp_dir)
        tar_filename = file_path.split("/")[-1]
        temp_path = add_trailing_slash(temp_dir) + tar_filename 

        with tarfile.open(temp_path) as tar_file:
            print("Package contains the following entries:")
            tar_file.list()

            choice = ask("\nProceed with extraction? [N,y] ").strip().lower()
            if choice == "y":
                vprint("Extracting...")
                tar_file.extractall( path=temp_dir )
                vprint("Extracted.")

                extracted_dir = add_trailing_slash(temp_dir) + tar_filename.split(".")[0]

                vprint("Installing using makepkg")
                os.chdir(extracted_dir)

                vprint("Searching for PKGBUILD file...")
                if not find_pkgbuild_file( extracted_dir ):
                    print(bcolors.FAIL + "Error: could not find PKGBUILD exiting..." + bcolors.ENDC)
                    exit(4)
          
                vprint("PKGBUILD found.")

                vprint("Parsing control to makepkg.")
                try:
                    exitcode = subprocess.call(['makepkg', "-sir"])
                    
                    if exitcode == 0 and is_installed(pkg_name):
                        vprint("{}Installation was successful!{}".format(bcolors.OKGREEN, bcolors.ENDC))
                        return True
                    else:
                        vprint("{}Installation was unsuccessful.{}".format(bcolors.FAIL, bcolors.ENDC))
                except KeyboardInterrupt:
                    vprint('Interrupted.', color=bcolors.FAIL)
                finally:
                    subprocess.call(['chmod', '-R', '+rw', temp_dir])
    return False

def update_installed_packages(match_pkg, do_update=False):
    name = match_pkg['Name']
    if do_update:
        DB_CONNECT.execute("UPDATE packages SET lastModified=?, status=?, version=? WHERE name=? ;", 
            (match_pkg['LastModified'], Status.Installed.value, match_pkg['Version'], name))
    else:
        try:
            DB_CONNECT.execute("INSERT INTO packages VALUES (?,?,?,?);", 
                (name, match_pkg['Version'], match_pkg['LastModified'], Status.Installed.value))
        except sqlite3.IntegrityError:
            pass
    DB_CONNECT.commit()


def direct_match(match_pkg):
    print_entry(match_pkg)
    filename = match_pkg['URLPath'].split('/')[-1]

    output_path = check_or_make_out_dir()
    file_path = output_path + filename
    entry = DB_CONNECT.execute("SELECT version FROM packages WHERE name=? ;", (match_pkg['Name'],)).fetchone()
    do_download = OPTIONS['update'] or not (os.path.exists(file_path) and os.path.isfile(file_path))
    do_update = entry and entry[0] != match_pkg['Version']

    if OPTIONS['install']:
        cprint( "WARNING: Packages can contain malicious code. Install only from trusted sources.", color=bcolors.WARNING)
        choice = ask("Install package {} anyway? [N,y] ".format(match_pkg['Name']))
        if choice.strip().lower() == "y":
            if do_download or do_update:
                vprint("Downloading...")
                download_package(match_pkg['URLPath'], file_path)
                vprint("Downloaded. Saved as {}".format(file_path))
            else:
                vprint("Package already exists as {!r}".format(file_path))
            has_been_installed = install_package(file_path, match_pkg['Name'])
            if has_been_installed:
                update_installed_packages(match_pkg, do_update=do_update)

    elif OPTIONS['download']:
        if do_download:
            choice = ask("Download {}? [N,y] ".format(filename))
            if choice.strip().lower() == "y":
                vprint("Downloading...")
                download_package(match_pkg['URLPath'], file_path)
                vprint("Downloaded. Saved as {}".format(file_path))
        else:
            vprint("Package already exists as {!r}".format(file_path))


def find_direct_match( results ):
    for result in results:
        if result['Name'] == package_name:
            direct_pkg_result = result
            results.remove(result)
            return direct_pkg_result


def initialize_config():
    global CONFIG
    CONFIG = configparser.ConfigParser()
    CONFIG.read(['config.ini', os.path.expanduser('~/.config/pythur/config.ini')]) 
    if not CONFIG.sections():
        warnings.warn("No or empty configuration file detected")


def initialize_db():
    global DB_CONNECT
    ddir = CONFIG.get('database', 'databasedir', fallback=".db")
    dbname = CONFIG.get('database', 'databasename', fallback="packages.sqlite")

    if not dbname.endswith('.sqlite'):
        vprint(bcolors.FAIL + "Database name must end with .sqlite" + bcolors.ENDC)
        exit(3)

    ddir = os.path.abspath(os.path.expanduser(ddir))
    db_path = add_trailing_slash(ddir) + dbname
    ddl = None

    if not os.path.exists(ddir): 
        os.makedirs(ddir)
        ddl = "CREATE TABLE packages (name TEXT PRIMARY KEY, version TEXT NOT NULL, lastModified INTEGER NOT NULL, status INTEGER NOT NULL);"
    elif os.path.isfile(ddir):
        vprint("Could not initialize database: {} already exists".format(ddir), color=bcolors.FAIL)
        exit(3)

    DB_CONNECT = sqlite3.connect(db_path)
    DB_CONNECT.isolation_level = None
    if ddl:
        c = DB_CONNECT.execute(ddl)
        DB_CONNECT.commit()

def is_installed(pkg_name):
    return subprocess.call(['pacman', '-Qeq' , pkg_name], stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL) == 0

def remove_sync_db():
    names = DB_CONNECT.execute("SELECT name FROM packages").fetchall()
    found_names = []

    for pkg_name in names:
        if not is_installed(pkg_name[0]):
            found_names.append(pkg_name)
    DB_CONNECT.executemany('DELETE FROM packages WHERE name=?', found_names)
    DB_CONNECT.commit()


if __name__ == '__main__':
    initialize_config()
    initialize_db()

    AUR_URL = CONFIG.get('connections', 'aurbaseurl', fallback='https://aur.archlinux.org')
    RPC_URL = AUR_URL + CONFIG.get('connections', 'rpcurl', fallback='/rpc')

    package_name = consume_arguments()

    if OPTIONS['query']:
        def print_qentries(stuff):
            for name, version in stuff:
                print("{}{}{} {}{}{}"
                    .format(bcolors.BOLD, name, bcolors.ENDC, 
                        bcolors.OKGREEN, version, bcolors.ENDC))

        if package_name:
            c = DB_CONNECT.execute("SELECT name, version FROM packages WHERE name LIKE '%'|| ? || '%'", (package_name,))
            print_qentries(c.fetchall());
        else:
            c = DB_CONNECT.execute("SELECT name, version FROM packages")
            print_qentries(c.fetchall());

    elif OPTIONS['sync']:
        vprint("Removing old database entries...")
        remove_sync_db()
        vprint("Removed.")
    elif package_name:
        direct_pkg_result = None
        count, results = get_json_from_aur( package_name )
        
        if count == 0:
            cprint("No results found.", bcolors.FAIL)
            exit(1)
        else:
            direct_pkg_result = find_direct_match(results)

            results = sorted(results, 
                key=lambda entry: entry['Popularity'], reverse=True) 

            if direct_pkg_result:
                direct_match(direct_pkg_result)
            else:
                for entry in results:
                    print_entry(entry)
    else:
        exit(1)